class Solution {
    public int mostBooked(int n, int[][] meetings) {
        int[] mostBooked = new int[n];
        // use this to decide which room a meeting should go in
        // among several options for rooms
        PriorityQueue<Integer> unusedRooms = new PriorityQueue<>();
        for(int i = 0; i < n; i++) {
            unusedRooms.add(i);
        }

        // order ascending starting at the room that will be free soonest
        // [next available time, room index]
        PriorityQueue<long[]> usedRooms = new PriorityQueue<>((a,b) -> {
            if(a[0] == b[0]) {
                // fall back to lowest number room if two rooms become available at the same time
                return Long.compare(a[1], b[1]);
            }

            // pick the room that becomes available first
            return Long.compare(a[0], b[0]);
        });

        // Start values are unique but this is a more general solution
        Arrays.sort(meetings, (a, b) -> a[0] != b[0] ? Integer.compare(a[0], b[0]) : Integer.compare(a[1], b[1]));

        for(int[] meeting : meetings) {
            int start = meeting[0], end = meeting[1];

            // check if any usedRooms have become free
            while(!usedRooms.isEmpty() && usedRooms.peek()[0] <= start) {
                int availableRoom = (int) usedRooms.poll()[1];
                unusedRooms.add(availableRoom);
            }

            if(!unusedRooms.isEmpty()) {
                // always use an available room if one exists
                int availableRoom = unusedRooms.poll();
                // availableRoom becomes free again starting at end
                usedRooms.add(new long[]{end, availableRoom});
                mostBooked[availableRoom]++;
            } else {
                // no unused rooms, so we need to find the room which will be available next
                // and tack on meeting's duration
                long[] room = usedRooms.poll();
                usedRooms.add(new long[]{room[0] + end - start, room[1]});
                mostBooked[(int) room[1]]++;
            }
        }

        int most = mostBooked[0];
        int mostIndex = 0;
        for(int i = 0; i < mostBooked.length; i++) {
            if(mostBooked[i] > most) {
                most = mostBooked[i];
                mostIndex = i;
            }
        }

        return mostIndex;
    }
}
