
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if (root1 == null) {
            return root2;
        } else if (root2 == null) {
            return root1;
        }

        Queue<TreeNode[]> queue = new LinkedList<>();
        queue.offer(new TreeNode[]{root1, root2});
        while (!queue.isEmpty()) {
            TreeNode[] node = queue.poll();
            node[0].val += node[1].val;

            if (node[0].left != null || node[1].left != null) {
                if (node[0].left != null && node[1].left != null) {
                    queue.offer(new TreeNode[]{node[0].left, node[1].left});
                } else if (node[0].left == null) {
                    node[0].left = node[1].left;
                }
            }

            if (node[0].right != null || node[1].right != null) {
                if (node[0].right != null && node[1].right != null) {
                    queue.offer(new TreeNode[]{node[0].right, node[1].right});
                } else if (node[0].right == null) {
                    node[0].right = node[1].right;
                }
            }
        }

        return root1;
    
    }
}
Console
