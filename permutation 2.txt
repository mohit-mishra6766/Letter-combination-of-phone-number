class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
       List<List<Integer>> ans = new ArrayList<>();
        int len = nums.length;
        if (len == 0) {
            return ans;
        }

        // Sort is for pruning
        Arrays.sort(nums);

        boolean[] vis = new boolean[len];
        backtrack(ans, new ArrayList<>(), nums, vis, 0);
        return ans;
    }

    public void backtrack(List<List<Integer>> res, List<Integer> path, int[] nums, boolean[] visited, int len) {
        if (len == nums.length) {
            res.add(new ArrayList<>(path));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            // every number choose once.
            if (visited[i]) {
                continue;
            }

            // pruning:
            // i > 0 because i - 1 >=0
            // nums[i] == nums[i - 1] avoid duplicates
            // visited[i-1]=false is in tree level pruning
            if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {
                continue;
            }

            visited[i] = true;
            path.add(nums[i]);
            backtrack(res, path, nums, visited, len + 1);
            visited[i] = false;
            path.remove(path.size() - 1);
        }
    }

}